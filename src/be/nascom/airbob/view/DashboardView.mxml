<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" 	
	creationComplete="{currentState=model.connectedState}"
	currentStateChange="calculateHeight()"
	horizontalScrollPolicy="off" xmlns:view="be.nascom.airbob.view.*">
	
	<mx:states>
		<mx:State name="connected">
			<mx:SetStyle target="{label1}" name="color" value="#FFFFFF"/>
		</mx:State>
		<mx:State name="disconnected">
			<mx:SetProperty target="{label1}" name="visible" value="false"/>
		</mx:State>
	</mx:states>
	
	<mx:VBox width="100%" left="15" right="15">
	
		<mx:Canvas height="26" width="100%">
			<mx:Label y="4" text="{model.projects.length} project build(s)" right="0" id="label1" styleName="smallText"/>						
		</mx:Canvas>				
		
		<mx:ViewStack id="viewStack" 
			width="100%" height="100%" 
			selectedIndex="0"  
			visible="{currentState=='connected'}" 
			includeInLayout="{currentState=='connected'}" >
			
			<mx:VBox id="fullView" width="100%" height="100%">
				<mx:Repeater id="projectRepeater" dataProvider="{model.projects}">
					<view:DashboadProjectView project="{projectRepeater.currentItem}" currentState="{projectRepeater.currentItem.state}" />										
				</mx:Repeater>	
			</mx:VBox>	
				
		</mx:ViewStack>					
			
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import be.nascom.airbob.model.AppModelLocator;
			import mx.logging.Log;
			import mx.logging.ILogger;
			import mx.rpc.events.FaultEvent;
			import mx.collections.ArrayCollection;
		  	import mx.collections.XMLListCollection;
		  	import mx.rpc.events.ResultEvent;
		  	
		  	[Bindable]
		  	public var model:AppModelLocator = AppModelLocator.getInstance();
		  	
		  	[Bindable]
		  	private var connectedText:String;
		  	
		  	private var blockHeight:int = 50;
		  	
		  	private static var logger:ILogger = Log.getLogger("Dashboard");		  		  
		  	
		  	private function calculateHeight():void 
		  	{
		  		var appHeight:int = blockHeight;
		  		if (viewStack.selectedIndex==0) 
		  		{		  			
			  		if (currentState=="disconnected") 
			  		{
			  			this.parentApplication.height=appHeight;
			  		} 
			  		else 
			  		{
			  			appHeight+=((blockHeight+6)*(model.projects.length+1))+50;
			  			this.parentApplication.height=appHeight;
			  		}	
		  		} 
		  		else 
		  		{
		  			this.parentApplication.height=350;
//		  			this.iconView.height = 200;
		  		}
		  		
		  		logger.debug("Calculate height: " + appHeight);
		  	}	
		  			  	
//		  	private function handleCCTrayServiceResult(event:ResultEvent):void {	
//		 		currentState = "connected";
//		 		var projectCount:int = model.projects.length;
//		 		if (event.result.Projects!=null){
//		 			if (event.result.Projects.Project is ArrayCollection) {
//		 				model.update(event.result.Projects.Project);
//		 			} else {
//		 				var projects:ArrayCollection = new ArrayCollection();
//		 				projects.addItem(event.result.Projects.Project);
//		 				model.update(projects);		 				
//		 			}		 			
//		 		}	
//		 		if (model.projects.length!=projectCount){
//		 			calculateHeight();
//		 		}	 		
		 				 				 				 							  
//		 	}
		 	
		]]>
	</mx:Script>
	
</mx:Canvas>

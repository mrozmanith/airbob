<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:view="be.nascom.airbob.view.*" 	
	creationComplete="init()"
	currentState="{model.connectedState}"
	currentStateChange="handleCurrentStateChange(event)"
	horizontalScrollPolicy="off" xmlns:components="be.nascom.airbob.view.components.*">
	
	<mx:states>
		<mx:State name="connected">		
		</mx:State>
		<mx:State name="disconnected">		
		</mx:State>
	</mx:states>
	
	<mx:VBox width="100%" left="10" right="10" top="25" verticalGap="4">	
		<mx:VBox id="urlBox" width="100%" visible="false" includeInLayout="false">
			<components:AirbobTextInput id="urlInput" text="{model.config.url}" color="White" width="100%" paddingLeft="2" paddingTop="2" paddingBottom="2" paddingRight="2"/>
		</mx:VBox>		
		<mx:Repeater id="projectRepeater" dataProvider="{model.projects}">
			<view:DashboadProjectView project="{projectRepeater.currentItem}" currentState="{projectRepeater.currentItem.state}" />										
		</mx:Repeater>				
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import be.nascom.airbob.events.SaveConfigEvent;
			import mx.events.StateChangeEvent;
			import be.nascom.airbob.model.AppModelLocator;
			import mx.logging.Log;
			import mx.logging.ILogger;
			import mx.rpc.events.FaultEvent;
			import mx.collections.ArrayCollection;
		  	import mx.collections.XMLListCollection;
		  	import mx.rpc.events.ResultEvent;
		  	
		  	[Bindable]
		  	public var model:AppModelLocator = AppModelLocator.getInstance();
		  	
		  	[Bindable]
		  	private var connectedText:String;
		  	
		  	private var blockHeight:int = 50;
		  	
		  	private static var logger:ILogger = Log.getLogger("Dashboard");		
		  	
		  	private function init():void 
		  	{
		  		model.addEventListener(AppModelLocator.EVENT_MODEL_UPDATED, handleModelUpdated);		  				  		
		  	}  
		  	
		  	private function handleModelUpdated(event:Event):void 
		  	{
		  		calculateHeight("connected");
		  	}		  
		  	
		  	private function handleCurrentStateChange(event:StateChangeEvent):void 
		  	{
		  		calculateHeight(event.newState);
		  	}
		  	
		  	public function handleUrlButtonClick(event:Event):void 
		  	{
		  		if (urlBox.visible)
		  		{		  	
		  			if (model.config.url!=urlInput.text) 
		  			{	
			  			model.config.url = urlInput.text;
			  			new SaveConfigEvent().dispatch();
		  			}
		  		}
		  		urlBox.visible = !urlBox.visible;
		  		urlBox.includeInLayout = !urlBox.includeInLayout;
		  		
		  	}		  			  	
		  	
		  	private function calculateHeight(state:String):void
		  	{
		  		var appHeight:int = blockHeight;
	  			if (state=="disconnected") 
		  		{
		  			this.parentApplication.height=appHeight;
		  		} 
		  		else 
		  		{
		  			appHeight+=((blockHeight)*(model.projects.length+1));
		  			this.parentApplication.height=appHeight;
		  		}	
		  		logger.debug("Calculate height: " + appHeight);
		  	}	
		  			  			 	
		]]>
	</mx:Script>
	
</mx:Canvas>
